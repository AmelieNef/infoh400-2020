/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulb.lisa.infoh400.labs2020.view;

import com.pixelmed.dicom.AttributeList;
import com.pixelmed.dicom.AttributeTag;
import com.pixelmed.dicom.DicomDictionary;
import com.pixelmed.dicom.DicomDirectory;
import com.pixelmed.dicom.DicomDirectoryRecord;
import com.pixelmed.dicom.DicomException;
import com.pixelmed.dicom.TagFromName;
import com.pixelmed.display.SourceImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileSystemView;
import ulb.lisa.infoh400.labs2020.controller.ImageJpaController;
import ulb.lisa.infoh400.labs2020.model.Image;

/**
 *
 * @author Adrien Foucart
 */
public class OpenDICOMDIRWindow extends javax.swing.JFrame {
    
    private final EntityManagerFactory emfac = Persistence.createEntityManagerFactory("infoh400_PU");
    private final ImageJpaController imageCtrl = new ImageJpaController(emfac);
    
    private String dicomdirpath = "";
    private DicomDirectory dicomdir = new DicomDirectory();
    
    /**
     * Creates new form OpenDICOMDIRWindow
     */
    public OpenDICOMDIRWindow() {
        initComponents();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectDICOMDIRButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        dicomdirTree = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        dicomAttributesTextPane = new javax.swing.JTextPane();
        imageViewerLabel = new javax.swing.JLabel();
        saveToDatabaseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        selectDICOMDIRButton.setText("Select DICOMDIR");
        selectDICOMDIRButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectDICOMDIRButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Add Image");

        dicomdirTree.setModel(dicomdir);
        dicomdirTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                dicomdirTreeValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(dicomdirTree);

        jScrollPane2.setViewportView(dicomAttributesTextPane);

        imageViewerLabel.setBackground(new java.awt.Color(0, 0, 0));
        imageViewerLabel.setForeground(new java.awt.Color(255, 255, 255));
        imageViewerLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        imageViewerLabel.setText("Viewer");
        imageViewerLabel.setOpaque(true);

        saveToDatabaseButton.setText("Save to Database");
        saveToDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToDatabaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(selectDICOMDIRButton)
                                .addGap(18, 18, 18)
                                .addComponent(saveToDatabaseButton))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(imageViewerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectDICOMDIRButton)
                    .addComponent(saveToDatabaseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(imageViewerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dicomdirTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_dicomdirTreeValueChanged
        Object selectedObject = dicomdirTree.getLastSelectedPathComponent();
        DicomDirectoryRecord ddr = (DicomDirectoryRecord) selectedObject;
        if( ddr == null ) return;
        
        AttributeList al = ddr.getAttributeList();
        if( al == null ) return;
        String allAttributes = "";
        DicomDictionary dicomDic = new DicomDictionary();
        for( AttributeTag t : al.keySet() ){
            allAttributes +=  dicomDic.getFullNameFromTag(t) + " :: " + al.get(t).getDelimitedStringValuesOrEmptyString() + "\n";
        }
        dicomAttributesTextPane.setText(allAttributes);
        
        if(al.get(TagFromName.DirectoryRecordType).getSingleStringValueOrEmptyString().equalsIgnoreCase("IMAGE")){
            String path = al.get(TagFromName.ReferencedFileID).getDelimitedStringValuesOrEmptyString();
            File imageFile = new File(dicomdirpath, path);
            try {
                SourceImage sImg = new SourceImage(imageFile.getAbsolutePath());
                ImageIcon icon = new ImageIcon(sImg.getBufferedImage()); // converts to Swing image
                imageViewerLabel.setIcon(icon); // Shows image in a jLabel
                imageViewerLabel.setText("");
            } catch (IOException | DicomException ex) {
                Logger.getLogger(OpenDICOMDIRWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            imageViewerLabel.setIcon(null);
            imageViewerLabel.setText("Viewer");
        }

    }//GEN-LAST:event_dicomdirTreeValueChanged

    private void saveToDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToDatabaseButtonActionPerformed
        Object selectedObject = dicomdirTree.getLastSelectedPathComponent();
        DicomDirectoryRecord ddr = (DicomDirectoryRecord) selectedObject;
        if( ddr == null ) return;
        
        AttributeList al = ddr.getAttributeList();
        if(al.get(TagFromName.DirectoryRecordType).getSingleStringValueOrEmptyString().equalsIgnoreCase("IMAGE")){
            String path = "E:\\pCloud\\ULB\\TPs\\INFOH400\\Data\\DICOMDIR\\" + al.get(TagFromName.ReferencedFileID).getDelimitedStringValuesOrEmptyString();
            
            AttributeList list = new AttributeList();
            try {
                list.read(path);
                Image image = new Image();
                image.setInstanceuid(list.get(TagFromName.SOPInstanceUID).getDelimitedStringValuesOrEmptyString());
                image.setSeriesuid(list.get(TagFromName.SeriesInstanceUID).getDelimitedStringValuesOrEmptyString());
                image.setStudyuid(list.get(TagFromName.StudyInstanceUID).getDelimitedStringValuesOrEmptyString());
                image.setPatientDicomIdentifier(list.get(TagFromName.PatientID).getDelimitedStringValuesOrEmptyString());
                imageCtrl.create(image);
                
                dicomAttributesTextPane.setText("Saved image to database.");
            } catch (IOException | DicomException ex) {
                Logger.getLogger(OpenDICOMDIRWindow.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveToDatabaseButtonActionPerformed

    private void displayDICOMDIR(File f){
        try {
            AttributeList list = new AttributeList();
            list.read(f);
            dicomdir = new DicomDirectory(list);
            dicomdirTree.setModel(dicomdir);            
        } catch (IOException | DicomException e) {
            e.printStackTrace(); //in real life, do something about this exception
        }
    }
    
    private void selectDICOMDIRButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectDICOMDIRButtonActionPerformed
        JFileChooser jfc = new JFileChooser("E:\\pCloud\\ULB\\TPs\\INFOH400\\Data\\DICOMDIR");
        jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnValue = jfc.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
                File selectedFile = jfc.getSelectedFile();
                dicomdirpath = selectedFile.getParent();
                displayDICOMDIR(selectedFile);
        }
    }//GEN-LAST:event_selectDICOMDIRButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane dicomAttributesTextPane;
    private javax.swing.JTree dicomdirTree;
    private javax.swing.JLabel imageViewerLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton saveToDatabaseButton;
    private javax.swing.JButton selectDICOMDIRButton;
    // End of variables declaration//GEN-END:variables
}
